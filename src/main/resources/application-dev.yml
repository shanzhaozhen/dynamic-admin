server:
  port: 8090

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/classroom?useSSL=true&characterEncoding=utf8&serverTimezone=GMT%2B8
    username: root
    password: 123456
    #driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    initialSize: 5 #初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
    min-idle: 5 #最小连接池数量
    maxActive: 20 #最大连接池数量
    maxWait: 60000 #获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
    #poolPreparedStatements: true #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
    maxOpenPreparedStatements: 20 #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
    timeBetweenEvictionRunsMillis: 60000 #配置获取连接等待超时的时间
    minEvictableIdleTimeMillis: 300000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    #validationQuery用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
    validationQuery: SELECT 1 FROM DUAL #oracle必须这样配置检查，不了会报检查错误
    #testOnBorrow和testOnReturn在生产环境一般是不开启的，主要是性能考虑。失效连接主要通过testWhileIdle保证，如果获取到了不可用的数据库连接，一般由应用处理异常
    #validationQuery: SELECT 'x'
    testWhileIdle: true #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    testOnBorrow: false #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    testOnReturn: false #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    #end
    #exceptionSorter: true #当数据库抛出一些不可恢复的异常时，抛弃连接(新版本会自动配置，类型不是Boolean)
    #属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat,日志用的filter:log4j,防御sql注入的filter:wall
    filters: stat,wall,slf4j
    maxPoolPreparedStatementPerConnectionSize: 20 #打开PSCache，并且指定每个连接上PSCache的大小
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500 #打开mergeSql功能；慢SQL记录
    useGlobalDataSourceStat: true #合并多个DruidDataSource的监控数据

upload:
  relativePath: /files/
  realPath: C:/devFile/

logging:
  file: log/classroom.log

